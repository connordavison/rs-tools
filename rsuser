#!/usr/bin/python
try:
	from errors import *
	from getopt import getopt
	from levenshtein import distance
	from metaphone import doublemetaphone
	import requests
	import sys
except ImportError as e:
	print e
	print 'Ensure that /usr/bin/python is a python 2.7 shell.'
	exit(99)


class rsskill:

	def __init__(self, name, rank, level, xp):
		self.__name = name
		self.__rank = rank
		self.__level = level
		self.__xp = xp

	def get_xp(self):
		return self.__xp

	def get_rank(self):
		return self.__rank

	def get_name(self):
		return self.__name

	def get_level(self):
		return self.__level

	def rank_mt(self, skill):
		return self.get_rank() > skill.get_rank()

	def xp_mt(self, skill):
		return self.get_xp() > skill.get_xp()

	def to_string(self):
		return self.get_name().ljust(16) + \
			str(self.get_rank()) + "\t" + \
			str(self.get_level()) + "\t" + \
			str(self.get_xp())


class rsuser:

	__API_URL = 'http://hiscore.runescape.com/index_lite.ws?player='
	__SKILL_NAMES = ['TOTAL', 'ATTACK', 'STRENGTH', 'DEFENCE', 
		'CONSTITUTION', 'RANGED', 'PRAYER', 'MAGIC',
		'COOKING', 'WOODCUTTING', 'FLETCHING', 'FISHING', 
		'FIREMAKING', 'CRAFTING', 'SMITHING', 'MINING',
		'HERBLORE', 'AGILITY', 'THIEVING', 'SLAYER',
		'FARMING', 'RUNECRAFTING', 'HUNTER', 'CONSTRUCTION',
		'SUMMONING', 'DUNGEONEERING', 'DIVINATION']

	def __init__(self, username):
		self.username = username
		dump = requests.get(self.__API_URL + username)
		
		dump.raise_for_status()
		
		self.__make__(dump)

	def __make__(self, dump):
		self.__skills = []
		dump = dump.text.split()
		for i in range(len(dump)):
			skill = dump[i].split(',')
			if len(skill) == 3:
				for j in [0,1,2]:
					skill[j] = int(skill[j])
				skill = rsskill(self.__SKILL_NAMES[i], skill[0], skill[1], skill[2])
				self.__skills.append(skill)
			else:
				break

	def get_skill(self, skill_name):
		for skill in self.__skills:
			if skill.get_name() == skill_name:
				return skill

	def get_skill_by_match(self, skill_name):
		possible_matches = list()

		# save the metaphone of the skill requested to save time
		skill_phon = doublemetaphone(skill_name)

		for skill in self.__skills:
			# the lev distance of skill_name and skill[1]
			pure_dist = distance(skill.get_name(), str(skill_name))
			
			# the lev distance of the query and the skill name
			phon_dist = distance(skill_phon[0], doublemetaphone(skill.get_name())[0])

			possible_matches.append((skill,pure_dist,phon_dist))

		# rank the matches based on tuple right
		ranked = sorted(possible_matches, key = lambda t: t[1]*t[2])
		return ranked[0][0]

	def get_skills(self):
		return self.__skills

	def to_string(self):
		out = ""
		for s in self.__skills:
			out += s.to_string() + "\n"
		return out


if __name__ == "__main__":
	err_msg = 'Usage:\trsuser [ -h ] [ -a ] [ -g ] [ -o ] [ -s skill ] user0 [ user1 [ user 2 ... ]]'

	try:
		opts, args = getopt(sys.argv[1:], "hs:cgao")
	except:
		print 'Could not get options.'
		print err_msg
		exit(1)
	
	if not args:
		print 'No arguments supplied.'
		print err_msg
		exit(2)

	skill = ""

	for flag, value in opts:
		if flag == '-h':
			print err_msg
			exit(3)
		elif flag == '-c':
			skill += 'attack,strength,defence,ranged,mage,constitution,prayer,summoning'
		elif flag == '-g':
			skill += 'divination,farming,fishing,hunter,mining,woodcutting'
		elif flag == '-a':
			skill += 'cooking,construction,crafting,firemaking,fletching,herblore,runecrafting,smithing'
		elif flag == '-o':
			skill += 'agility,dungeoneering,slayer,thieving'
		if flag == '-s':
			if value is None: continue
			skill = value


	for arg in args:
		try:
			rsu = rsuser(arg)
		except Exception as e:
			print e
		print "-+-".center(42)
		print "-+-".center(6) + arg.title().center(30) + " -+- ".center(6)
		print "-+-".center(42)
		print " ".ljust(10) + "\tRANK\tLEVEL\tXP"
		if skill is '':
			print rsu.to_string()
		else:
			for s in skill.split(','):
				if not s is '':
					print rsu.get_skill_by_match(s).to_string()

